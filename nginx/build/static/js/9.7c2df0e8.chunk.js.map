{"version":3,"sources":["components/views/staff/criteriasManagePage/criteriasTableViewer.js","components/views/staff/staffCriteriasPage.js"],"names":["treeNode","anc","childs","label","Object","_home_pgas_pgas_web_system_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__","this","ancestor","span","CriteriasTableViewer","props","_this","_home_pgas_pgas_web_system_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_1__","_home_pgas_pgas_web_system_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_2__","call","makeTable","bind","_home_pgas_pgas_web_system_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_4__","makeHead","makeHeadRec","tree","incrSpan","bodyTree","renderList","getPath","getSubHeaderRows","curNode","level","headers","spans","_this2","keys","map","node","push","length","newNode","undefined","inputCrits","inputSchema","head","allCrits","allSchema","firstLevelCritsLabels","firstLevelCritsLength","clearSchema","META","clearCrits","i","isNewSubTable","val","root","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","header","colSpan","style","wordWrap","font-size","crits","schema","buildedHeadSchema","shift","_this3","Array","type","prevNode","nodesWithLists","_this4","deep","arguments","isList","lists","isColumn","renderSubTableHeader","x","headerNodes","splice","_this5","path","childNode","childMarkup","isNewLine","needDeep","th","markup","Fragment","child","toString","replace","scope","rowSpan","m","needNewLine","_this6","_this7","criterias","key","textAlign","marginTop","backgroundColor","className","Component","StaffCriteriasPage","_home_pgas_pgas_web_system_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","_home_pgas_pgas_web_system_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_home_pgas_pgas_web_system_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","staffContextStore","getCritsAndSchema","then","react__WEBPACK_IMPORTED_MODULE_5___default","id","display","justify-content","value","onClick","history","goBack","width","height","_criteriasManagePage_criteriasTableViewer__WEBPACK_IMPORTED_MODULE_8__","observer"],"mappings":"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","file":"static/js/9.7c2df0e8.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport '../../../../style/user_main.css';\nimport '../../../../style/critTableViewer.css';\n\nclass treeNode {\n    ancestor;\n    childs = [];\n    label;\n    span;\n\n    constructor(anc, childs, label) {\n        this.ancestor = anc;\n        this.childs = childs;\n        this.label = label;\n        this.span = 0\n    }\n}\n\nfunction cloneObject(obj) {\n    var clone = {};\n    for (var i in obj) {\n        if (obj[i] != null && typeof (obj[i]) == \"Object\")\n            clone[i] = cloneObject(obj[i]);\n        else\n            clone[i] = obj[i];\n    }\n    return clone;\n}\n\nclass CriteriasTableViewer extends Component {\n    constructor(props) {\n        super(props);\n        this.makeTable = this.makeTable.bind(this);\n        this.makeHead = this.makeHead.bind(this);\n        this.makeHeadRec = this.makeHeadRec.bind(this);\n        this.tree = this.tree.bind(this);\n        this.incrSpan = this.incrSpan.bind(this);\n        this.bodyTree = this.bodyTree.bind(this);\n        this.renderList = this.renderList.bind(this);\n        this.getPath = this.getPath.bind(this);\n        this.getSubHeaderRows = this.getSubHeaderRows.bind(this)\n    };\n\n    tree(tree, curNode, level, headers, spans) {\n        Object.keys(tree).map((node) => {\n            let a = 0;\n            if (!headers[level]) headers.push([]);\n            if (node == 'SHIFT') {\n                if (headers[level].length == 0 && Object.keys(tree).length > 1) {\n                    let newNode = new treeNode(undefined, undefined, '');\n                    newNode.span = tree[node];\n                    headers[level].push(newNode)\n                }\n            } else {\n                let newNode = new treeNode(curNode, Object.keys(tree[node]), node);\n                headers[level].push(newNode);\n                this.incrSpan(curNode);\n                this.tree(tree[node], newNode, level + 1, headers)\n            }\n        })\n    }\n\n    incrSpan(node) {\n        if (node) {\n            node.span += 1;\n            if (node.ancestor)\n                this.incrSpan(node.ancestor)\n        }\n    }\n\n    makeHead(inputCrits, inputSchema, label) {\n        let head = {};\n        let shift = {val: 0};\n        let hasSubTable = {val: false};\n        let crits = inputCrits;\n        let schema = inputSchema;\n        const allCrits = inputCrits;\n        const allSchema = inputSchema;\n        let firstLevelCritsLabels = Object.keys(allCrits[label]);\n        let firstLevelCritsLength = firstLevelCritsLabels.length;\n        let clearSchema = {META: allSchema.META};\n        let clearCrits = {};\n        clearSchema[label] = {META: allSchema[label].META};\n        clearCrits[label] = {};\n        for (let i = 0; i < firstLevelCritsLength; i++) {\n            if (!allSchema[label][firstLevelCritsLabels[i]].META || !allSchema[label][firstLevelCritsLabels[i]].META.isNewSubTable) {\n                clearSchema[label][[firstLevelCritsLabels[i]]] = allSchema[label][firstLevelCritsLabels[i]];\n                clearCrits[label][[firstLevelCritsLabels[i]]] = allCrits[label][firstLevelCritsLabels[i]]\n            } else break\n        }\n        this.makeHeadRec(clearCrits, clearSchema, label, head, shift);\n        let headers = [];\n        let spans = [];\n        let root = new treeNode(undefined, Object.keys(headers), '');\n        this.tree(head, root, 0, headers, spans);\n        return (\n            headers.map((level) => {\n                return (\n                    <tr>{\n                        level.map((header) => {\n                            return (<th colSpan={header.span}\n                                        style={{\"wordWrap\": \"breakWord\", \"font-size\": \"x-small\"}}>{header.label}</th>)\n                        })\n                    }\n                    </tr>\n                )\n            })\n        )\n    }\n\n    makeHeadRec(crits, schema, label, buildedHeadSchema, shift) {\n        if (!(crits instanceof Array)) {\n            if (schema.META.type == 'c' && !schema.META.isNewSubTable) {\n                if (shift.val > 0) {\n                    if (!buildedHeadSchema['SHIFT']) buildedHeadSchema['SHIFT'] = shift.val;\n                    shift.val = 0\n                }\n                if (!buildedHeadSchema[label]) buildedHeadSchema[label] = {};\n                Object.keys(crits[label]).map((node) => {\n                    if (buildedHeadSchema[label]) buildedHeadSchema[label] ['SHIFT'] = buildedHeadSchema['SHIFT'];\n                    this.makeHeadRec(crits[label], schema[label], node, buildedHeadSchema[label], shift)\n                })\n            } else if (!schema.META.isNewSubTable) {\n                shift.val = shift.val + 1;\n                Object.keys(crits[label]).map((node) => {\n                    this.makeHeadRec(crits[label], schema[label], node, buildedHeadSchema, shift)\n                })\n            }\n        }\n    }\n\n\n    bodyTree(crits, schema, label, prevNode, nodesWithLists, deep = 0) {\n        if (!(crits instanceof Array)) {\n            if (schema.META && schema.META.type == 'r') {\n                let newNode = new treeNode(prevNode, [], label);\n                if (schema[label].META && schema[label].META.isNewSubTable) {\n                    let headers = [];\n                    let spans = [];\n                    this.renderSubTableHeader(newNode, headers, spans);\n                    newNode.headers = headers;\n                    newNode.spans = spans;\n\n                    for (let i = 0; i < headers.length; i++)\n                        this.incrSpan(prevNode);\n                    newNode.isNewSubTable = schema[label].META.isNewSubTable\n                }\n\n                if (prevNode)\n                    prevNode.childs.push(newNode);\n                if (!(crits[label] instanceof Array)) {\n                    Object.keys(crits[label]).map((node) => {\n                        this.bodyTree(crits[label], schema[label], node, newNode, nodesWithLists, deep + 1)\n                    })\n                } else this.bodyTree(crits[label], schema[label], 'dummy', newNode, nodesWithLists, deep)\n            } else {\n\n                if (!(crits[label] instanceof Array)) {\n\n                    Object.keys(crits[label]).map((node) => {\n\n                        this.bodyTree(crits[label], schema[label], node, prevNode, nodesWithLists, deep)\n                    });\n                }\n                else {\n\n                    this.bodyTree(crits[label], schema[label], 'dummy', prevNode, nodesWithLists, deep)\n                }\n            }\n\n        } else {\n            if (!prevNode.isList) {\n                this.incrSpan(prevNode);\n                prevNode.isList = true;\n                prevNode.lists = [];\n                prevNode.deep = deep;\n                nodesWithLists.push(prevNode)\n            }\n            if (prevNode.label == 'dummy') prevNode.isColumn = false;\n            prevNode.lists.push(crits)\n        }\n    }\n\n    getPath(x, headerNodes) {\n        headerNodes.splice(0, 0, x.label);\n        if (x.ancestor)\n            this.getPath(x.ancestor, headerNodes)\n    }\n\n    getSubHeaderRows(schema, label, level, headers, spans) {\n        if (schema instanceof Array) return null;\n\n        Object.keys(schema).map((node) => {\n            if (node == 'META') return null;\n\n            if (!spans[level]) spans.push({});\n            if (!headers[level]) headers.push([]);\n\n\n            headers[level].push(node);\n            if (level > 0) {\n                if (!spans[level - 1][label]) spans[level - 1][label] = 0;\n                spans[level - 1][label] += 1\n            }\n            this.getSubHeaderRows(schema[node], node, level + 1, headers, spans)\n        })\n    }\n\n    renderSubTableHeader(node, headers, spans) {\n        let schema = this.props.schema;\n        let path = [];\n        this.getPath(node, path);\n        for (let i = 0; i < path.length; i++)\n            schema = schema[path[i]];\n\n        this.getSubHeaderRows(schema, node.label, 0, headers, spans);\n\n    }\n\n    renderList(node, childNode, childMarkup, isNewLine, needDeep = 0) {\n        if (node.isList) {\n            let th;\n            let markup = (\n                <>\n                    {node.lists.map((child) => {\n                        return (\n                            <td>{child.toString().replace(/,/g, ' | ')}</td>\n                        )\n                    })}\n                </>\n            );\n\n            if (node.isNewSubTable) {\n\n                if (node.deep && needDeep) th = (<th scope='rowgroup' colSpan={needDeep + 1 - node.deep}\n                                                     rowSpan={1 + node.headers.length}>{node.label}</th>);\n                else th = <th scope='rowgroup' rowSpan={1 + node.headers.length}>{node.label}</th>;\n\n                let m = (<>\n                    {this.renderList(node.ancestor, node, (<>{th}{\n                        node.headers[0].map((x) => {\n                            if (node.spans[0][x])\n                                return <td colSpan={node.spans[0][x]}>{x}</td>;\n                            else return <td>{x}</td>\n                        })\n                    }</>), true)}\n                </>);\n\n                for (let i = 1; i < node.headers.length; i++) {\n                    m = (<>\n                        {m}\n                        {this.renderList(node.ancestor, node, (<>{\n                            node.headers[i].map((x) => {\n                                return <td>{x}</td>\n                            })\n                        }</>), false)}\n                    </>)\n                }\n\n                return (<>{m}{markup}</>)\n            }\n\n            if (node.deep && needDeep) th = (<th scope='row' colSpan={needDeep + 1 - node.deep}>{node.label}</th>);\n            else th = <th scope='row'>{node.label}</th>;\n            return this.renderList(node.ancestor, node, (<>{th}{markup}</>), true)\n\n        } else {\n            let markup = childMarkup;\n            let needNewLine = false;\n            if (node.childs[0] === childNode && isNewLine) {\n                //if (node.label.toString().replace(/\\s+/g, ' ') == \"2 (7б)\")\n                //    console.log(childNode.label);\n                markup = (\n                    <>\n                        <th scope=\"rowgroup\" rowSpan={node.span}>{node.label}</th>\n                        {childMarkup}\n                    </>\n                );\n                needNewLine = true\n            }\n            if (!node.ancestor) {\n\n                return (<tr>\n                    {markup}\n                </tr>);\n            }\n\n            return this.renderList(node.ancestor, node, markup, needNewLine)\n        }\n    }\n\n    makeTable(crits, schema, label) {\n        let root = new treeNode(undefined, [], label);\n        let nodesWithLists = [];\n        this.bodyTree(crits, schema, label, undefined, nodesWithLists);\n        let deep = nodesWithLists[0].deep;\n        return (\n            nodesWithLists.map((node) => {\n                return this.renderList(node, undefined, undefined, true, deep)\n            })\n        )\n    }\n\n    render() {\n        return (\n            <div>\n                {Object.keys(this.props.criterias).map((key) => {\n                    //if (key != '6 (9а)') return null;\n\n                    const crits = this.props.criterias;\n                    const schema = this.props.schema;\n                        return (\n                            <>\n                                <h4 style={{\n                                    \"textAlign\": \"center\",\n                                    \"marginTop\": \"10px\",\n                                    \"backgroundColor\": \"#07265d\"\n                                }}>{key}</h4>\n                                <table className=\"table-bordered table-sm\"\n                                       style={{\"wordWrap\": \"breakWord\", \"font-size\": \"x-small\"}}>\n                                    <colgroup>\n                                        <col className=\"test\"></col>\n                                    </colgroup>\n                                    <thead>\n                                    {this.makeHead(crits, schema, key)}\n                                    </thead>\n                                    <tbody>\n                                    {this.makeTable(this.props.criterias, this.props.schema, key)}\n                                    </tbody>\n                                </table>\n                            </>\n                        )\n                    }\n                )}\n            </div>\n\n        )\n    }\n}\n\nexport default CriteriasTableViewer","import React, {Component} from 'react';\nimport '../../../style/user_main.css';\nimport {observer} from \"mobx-react\";\nimport CriteriasTableViewer from \"./criteriasManagePage/criteriasTableViewer\";\nimport staffContextStore from \"../../../stores/staff/staffContextStore\";\n\nclass StaffCriteriasPage extends Component {\n    constructor(props) {\n        super(props);\n    };\n\n    componentWillMount() {\n        if (!staffContextStore.criterias || !staffContextStore.schema) {\n            staffContextStore.getCritsAndSchema().then()\n        }\n    }\n\n    render() {\n        return (\n            <main>\n                <div id=\"panel\" className=\"row justify_center\">\n                    <div className=\"col-9 general\">\n                        <div className=\"profile\" style={{\"display\": \"flex\", \"justify-content\": \"space-between\"}}>\n                            <div className=\"centered_ver\">\n                                <p className=\"headline\">\n                                    Критерии\n                                </p>\n                            </div>\n                            <div className=\"centered_ver\">\n                                <button id=\"DeleteButton\" className=\"btn btn-primary\"\n                                        value=\"Примечания\" onClick={() => {\n                                    this.props.history.push('/staff/manageAnnotations')\n                                }}>Примечания\n                                </button>\n                            </div>\n                            <div className=\"centered_ver\">\n                                <button id=\"DeleteButton\" className=\"btn btn-secondary\"\n                                        value=\"Назад\" onClick={() => {\n                                    this.props.history.goBack()\n                                }}>Назад\n                                </button>\n                            </div>\n                        </div>\n                        <hr className=\"hr_blue\"/>\n                        <div style={{\"width\": \"100%\", \"height\": \"100%\"}}>\n                            {(staffContextStore.criterias && staffContextStore.schema) &&\n                            <CriteriasTableViewer criterias={staffContextStore.criterias}\n                                                  schema={staffContextStore.schema}/>}\n                        </div>\n                    </div>\n                </div>\n            </main>)\n    }\n}\n\nexport default observer(StaffCriteriasPage)"],"sourceRoot":""}